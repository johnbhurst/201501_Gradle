Gradle

A better build tool

Ant:
  Flexible, but verbose
  Too much boilerplate
  Lack of standardization
  But lots of 3rd party tools support

Maven:
  Not so flexible
  Still somewhat verbose (XML)
  Standardized build
  Some 3rd party tool support

Gradle:
  Standardized, but flexible
  Domain Specific Language for describing build
  Plugin-based (even to compile Java)

Use Standard build conventions
But change what you need to
Can script with Groovy
But don't get carried away

Fundamental Concepts
- Projects
- Tasks
- Configurations
- Dependencies

Some plugins
Java
Groovy
Scala
Maven
Application


Recipes:
- Publishing test artifacts for sharing in other projects
- Common version numbers

Plugin example: Duplicate classes
Show

jar {} example from Redcon

sourcesJar from Redcon

testJar from Redcon

archives from Redcon

antlr example from tsrch?

Running concordion

Antlr example:
dependencies {
  compile "org.antlr:antlr:$antlrVersion"
}

task(antlr, type: JavaExec) {
  main = "org.antlr.Tool"
  classpath = sourceSets.main.runtimeClasspath
  args = [
    '-o src/main/java/myproject/lang',
    'src/main/java/myproject/lang/EqlQuery.g',
    'src/main/java/myproject/lang/EqlQueryWalker.g'
  ]
}

dependencies {
  runtime "postgresql:postgresql:$postgresqlVersion"
  runtime files("lib/schemaSpy_5.0.0.jar")
}

class SchemaSpyTask extends DefaultTask {
  String driver = "org.postgresql.Driver"
  String host = project.property("db.serverName")
  String database = project.property("db.databaseName")
  String user = project.property("db.user")
  String password = project.property("db.password")
  String schema = project.property("db.schema")

  @TaskAction
  def run() {
    project.javaexec {
      main = "net.sourceforge.schemaspy.Main"
      maxHeapSize = "2048m"
      classpath = project.configurations.runtime
      args = [
        "-t", "pgsql",
        "-host", host,
        "-db", database,
        "-u", user,
        "-p", password,
        "-s", schema,
        "-o", "build/schemaspy",
        "-hq"
      ]
    }
  }
}

task schemaspy(type: SchemaSpyTask)


Gradle bootstrap

Copy task example

Compile all source with groovyc
(avoid problems with Groovy/Java interdependencies):
sourceSets {
  main {
    java { srcDirs = [] }    // no source dirs for the java compiler
    groovy { srcDir "src/main/java" }  // compile everything in src/ with groovyc
  }
}


configurations {
  // transitive dependencies of log4j that are unrelated to our usage
  all*.exclude group: "javax.jms"       , module: "jms"
  all*.exclude group: "com.sun.jdmk"    , module: "jmxtools"
  all*.exclude group: "com.sun.jmx"     , module: "jmxri"
  all*.exclude group: "logkit"          , module: "logkit"
  all*.exclude group: "avalon-framework", module: "avalon-framework"
}

Add a new configuration for "provided" dependencies
configurations {
  provided
}

dependencies {
  provided "javax.servlet:javax.servlet-api:$javaxServletVersion"
  // ...
}

sourceSets {
  main { compileClasspath += configurations.provided }
  test {
    compileClasspath += configurations.provided
    runtimeClasspath += configurations.provided
  }
}

idea.module.scopes.PROVIDED.plus += [configurations.provided]


Using Ant:

class SqlTask extends DefaultTask {
  String script
  String onerror = "abort"

  @TaskAction
  def run() {
    ant.sql(
      driver: "org.postgresql.Driver",
      url: project.property("epigmatic.db.url"),
      userid: project.property("epigmatic.db.user"),
      password: project.property("epigmatic.db.password"),
      onerror: onerror
    )  {
      classpath(path: project.configurations.runtime.asPath)
      fileset(dir: "src/main/resources/ddl", includes: script)
    }
  }
}

task createAll(type: SqlTask) {
  script = "create_all.sql"
}

task dropAll(type: SqlTask) {
  script = "drop_all.sql"
  onerror = "continue"
}

task deleteSchemaData(type: SqlTask) {
  script = "delete_schema_data.sql"
}


More Using Ant:

configurations {
  antBuild
  other
}

dependencies {
  // ...
  antBuild "com.oracle:ojdbc6:$oracleVersion"
  // ...
}

ant.properties["foo"] = "bar"

ant.path(id: "classpath.build", path: configurations.antBuild.asPath)

ant.importBuild "build.xml"



Exporting a ZIP artifact

task distDdlZip(type: Zip, dependsOn: createDdl) {
  classifier = 'src'
  appendix = 'ddl'
  into('sql') {
    from 'build/ddl/owner','build/ddl/user'
  }
  String fullVersion =version.replaceAll( "-SNAPSHOT","")
  into('sql') {
    from ("src/main/sql/migrate") {
      include "update_${fullVersion}.sql"
      include "update_${fullVersion}_user.sql"
      include "update_${fullVersion}_read.sql"
    }
  }
}

artifacts {
  archives(distDdlZip)
  tests testJar
}


Defining configurations:

configurations {
  antClasspath
  compileGwt.extendsFrom compile
  developmentGwt.extendsFrom compileGwt
}

On the other hand, if you just want to customize what goes into a WAR:

war {
  from "src/main/webapp-gwt/"
}


Publish test artifacts to other (sub)projects

configurations {
  tests
}

task testJar(type: Jar, dependsOn: testClasses) {
  baseName = "${project.archivesBaseName}-test"
  from sourceSets.test.output
}

artifacts {
  tests testJar
}


Use common version numbers:

subprojects {
  project.ext {
    commonsCollectionsVersion = "3.2"
    commonsIoVersion = "1.4"
    commonsLangVersion = "2.5"
    ehcacheVersion = "2.4.7"
    groovyVersion = "2.3.7"
    hibernateVersion = "3.6.6.Final"
    junitVersion = "4.10"
    logbackVersion = "1.0.9"
    servletApiVersion = "3.0.1"
    slf4jVersion = "1.7.2"
    springVersion = "4.0.2.RELEASE"
  }
}

dependencies {
  compile "org.springframework:spring-core:$springVersion"
}


Customize JAR:

jar {
  def buildString = version + " built on " +
    new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone("Australia/Melbourne"))
  manifest {
    attributes(
      "Built-By": System.properties["user.name"],
      "Implementation-Title": project.name,
      "Implementation-Version": buildString
    )
  }
}


2015-01-28

More stuff:

1. Simple Java

Minimal Java project
Minimal Groovy project
Add tests
Concordion Example:

dependencies {
  testCompile "org.concordion:concordion:$concordionVersion"
}

sourceSets {
  test {
    groovy {
      srcDir "src/specs/groovy"
    }
    resources {
      srcDir "src/specs/resources"
    }
  }
}

test {
  systemProperties "concordion.output.dir": "build/concordion"
}

2.

Gradle Wrapper
- Creates scripts + libs you need to bootstrap Gradle
- Commit as part of project
- Automatically downloads and runs specified version from internet
- Repeatable builds
- No need to install Gradle apart from first generating wrapper
- E.g. Build server does not need Gradle installed

3. Some other features

buildscript {}
defaultTasks

allprojects {}
subprojects {}

4.

Lifecycle

5.

Configuration
~/.gradle/init.gradle or init.d
init.d config example: repository

6.

Writing a Plugin
- Script in build.gradle
- buildSrc
- Separate plugin project

---


Publishing artifacts
- To local filesystem repository
- To Artifactory

